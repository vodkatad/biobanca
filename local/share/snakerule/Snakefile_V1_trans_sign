include: "./conf.sk"


### qui mi serve il file di Simonetta, la tabella CRIS e il metadata_annot

### direi primo script che outputta il file per sankey uhm
### arrivare al un file di input per sankey
### script con sankey

### Simonetta's file original association PDX-PDO:
    ### filter out all samples without RNAseq available and human ones
rule simo:
    input: SIMO
    output: "SIMO_v2.tsv"
    shell:
        """
            cat {input} | sed 1d | sed '/LMH/d' | bawk '$5!="NO" {{print $2,$3,$6,substr($6,0,12)}}' > {output}.tmp
            cat <(echo -e "PDO_lineage\tDNA_GenID\tMATCHED_LMX-LMO\tPDX_lineage") {output}.tmp > {output}
            rm {output}.tmp*         
        """

rule metadata:
    input: cris=CRIS, meda=MEDA, simo="SIMO_v2.tsv"
    params: tool=BIN_DIR+"/forsankey_PDX-PDO"
    output: "unique_PDX-PDO_switch.tsv"
    shell:
        """
            {params.tool} -c {input.cris} -m {input.meda} -s {input.simo} -o {output}
        """

### Compute Cohen Kappa to know the concordance between two obseravtions, in this case CRIS classes in PDX and PDO
rule cohen:
    input: "unique_PDX-PDO_switch.tsv"
    output: "cohenK_PDX-PDO"
    script: SRC_DIR+"/cohenK.R"



###TODO regoletta che sputa due df: uno media uno correlazioni inter-pdx

# rule correlation:
#     input: switch="unique_PDX-PDO_switch.tsv", fpkm=FPKM
#     params: tool=BIN_DIR+"/"
#     output: "PDX-PDO_correlations.tsv.gz"
#     shell:
#         """

#         """

rule get_model_cris:
    input: simo="SIMO_v2.tsv", pdx=CRIS_NC_LMX, pdo =CRIS_NC_LMO
    output: right="model_cris-right.tsv", wrong="model_cris-wrong.tsv"
    log: "model_cris.log"
    script: SRC_DIR+ '/CRIS_simo.R'


rule true:
    input: cris="model_cris-right.tsv", true=TRUE
    output: "model_cris-right_validated.tsv"
    shell:
        """
            cat {input.cris} | bawk 'NR==1' > {output}
            cat {input.cris} | filter_1col 1 <(cat {input.true} | sed 1d | bawk '$2=="TRUE" {{print $1}}') >> {output}
        """

rule sankey:
    input: "model_cris-right_validated.tsv"
    output: pdf="sankey_model_cris_validated.pdf", html="sankey_model_cris_validated.html"
    script: SRC_DIR+"/sankey_classification.R"


rule sankeynco:
    input: "unique_PDX-PDO_switch.tsv"
    params: tool=BIN_DIR+"/PDX-PDO_different_plots"
    output: sankey="sankey_diagram_PDX-PDO_CRISswitch.html", classes="classes_freq_in_samples.png", switch="switch_numbers.png", switched="switching_CRIS_withBARs.png", kappa="cohen.k_value"
    shell:
        """
            {params.tool} -i {input} -s {output.sankey} -c {output.classes} -w {output.switch} -o {output.switched} -k {output.kappa}
        """

rule corr:
    input: switch="unique_PDX-PDO_switch.tsv", meda=MEDA_BASALI, vsd=VSD
    params: tool=BIN_DIR+"/PDO-PDX_correlations"
    output: "PDX-PDO_basali_genes-expression_correlations.tsv.gz"
    shell:
        """
            {params.tool} -s {input.switch} -m {input.meda} -v {input.vsd} -o {output}
        """

rule get_classes:
    input: metadata=MEDA, expr=VSD
    output: results = "{sclass}_allgenealogy.tsv"
    script: SRC_DIR+"/prepare_LMH_cris.R"

rule cris_v2_vsd:
    input: expr="{metric}_gene_genealogyall.tsv.gz"
    params: prefix="vsd_cris_{metric}"
    output: "vsd_cris_{metric}_prediction_result.xls"
    script: SRC_DIR+"/cris_classify_V2_vsdlmh.R"

rule wipe_up_after_cris_vsd:
    input: "vsd_cris_{metric}_prediction_result.xls"
    output: tsv="vsd_cris_{metric}_prediction_result.tsv", png="vsd_cris_{metric}_prediction_result.png"
    shell:
        """
            mv {input} {output.tsv}
            mv vsd_cris_{wildcards.metric}_heatmp.png {output.png}
            rm vsd_cris_{wildcards.metric}_sample_info.txt vsd_cris_{wildcards.metric}_sorted.dataset.gct vsd_cris_{wildcards.metric}_predicted*sorted.cls vsd_cris_{wildcards.metric}_FDR*png vsd_cris_{wildcards.metric}_*legend.png  vsd_cris_{wildcards.metric}_features.xls
            rm vsd_cris_{wildcards.metric}.tmp
        """

rule highlight_NC_vsd:
    input: tsv="vsd_cris_{metric}_prediction_result.tsv"
    output: "vsd_cris_{metric}_prediction_result_nc.tsv"
    shell:
        """
            cat {input.tsv} | bawk 'NR==1' > {output}
            cat {input.tsv} | sed 1d | bawk '$6>0.2 {{$2="NC"}}1' >> {output}
        """