include : "conf.sk"

def find_early_bed(wildcards):
    return SEQUENZA+'/loh/bed/'+SAMPLES_dic[wildcards.sample][0]+'.bed'
def find_late_bed(wildcards):
    return SEQUENZA+'/loh/bed/'+SAMPLES_dic[wildcards.sample][1]+'.bed'

rule early_vs_late_bed:
    input: early=find_early_bed,late=find_late_bed
    output: mixed='mixed_bed/{sample}.bed'
    shell:
        """
             bedtools intersect -wo -a {input.early} -b {input.late} > {output.mixed}
        """

rule early_vs_late:
    input: tsv='mixed_bed/{sample}.bed'
    output: loh='final/{sample}_loh.tsv',nosense_loh='check/{sample}_nosense_loh.tsv',common_loh='check/{sample}_common_loh.tsv'
    script: SRC_DIR+"/obtain_loh.R"

rule  all_early_vs_late_check:
    input: expand('check/{sample}_nosense_loh.tsv', sample=SAMPLES)



rule LOH_for_plot:
    input: loh='final/{sample}_loh.tsv',len_chr='../../../local/share/data/chr_len.tsv',loh_e=find_early_bed
    output: tsv="loh_plot/seg_dim_{number}/{sample}_loh_seg_dim_{number}.tsv"  #10000000
    run: 
        import pandas as pd
        seg_dim=int(wildcards.number)
        data=pd.read_csv(input['loh'],sep='\t',header=0,index_col=None)
        data_e=pd.read_csv(input['loh_e'],sep='\t',header=None,index_col=None)
        chr_len=pd.read_csv(input['len_chr'],sep='\t',header=0,index_col=None)
        chr_len['bp']=chr_len['bp'].astype('int')
        data_e.columns=['chr','start','end','a','b']
        data_e=data_e[data_e['b']==0]
        data_e.columns=['chr','start','end','a','b']
        data_e=data_e[data_e['b']==0]
        data['event']=['LOH_diff']*len(data)
        data_e['event']=['LOH_early']*len(data_e)
        data=data[['chr','start','end','event']]
        data_e=data_e[['chr','start','end','event']]
        data=pd.concat([data,data_e],ignore_index=True)
        chr_len['bp']=chr_len['bp'].astype('int')
        chr_dic={}
        for row in chr_len.iterrows():
            chr_dic[row[1]['Chromosome']]=row[1]['bp']
            
        def intersezione(start_seg,start,end_seg,end):
            intersezione=(min(end_seg,end)-max(start_seg,start))
            return intersezione

        data_seg=pd.DataFrame(columns=['chr','start','end','event','segment_id'])
        a=0
        for chr in chr_dic.keys():
            tmp=data[data['chr']==chr]
            for i in range(0,chr_dic[chr],seg_dim):
                a=a+1
                start=i+1
                end=i+seg_dim
                #cerco se esiste un segmento nel tmp che ha LOH
                tmp2=tmp[(tmp['start']<end ) & (tmp['end']>start)]
                if len(tmp2)==0:
                    riga={'chr':chr,'start':start,'end':end,'event':'NO','segment_id':a}
                    data_seg=pd.concat([data_seg,pd.DataFrame([riga])],ignore_index=True)
                else:
                    tmp2['intersezione']=tmp2.apply(lambda x: intersezione(start,x['start'],end,x['end']), axis=1)
                    evento=tmp2.loc[tmp2['intersezione'].idxmax()]
                    riga={'chr':chr,'start':start,'end':end,'event':evento['event'],'segment_id':a}
                    data_seg=pd.concat([data_seg,pd.DataFrame([riga])],ignore_index=True)

        data_seg.to_csv(output['tsv'],sep='\t',index=False)

rule  all_LOH_for_plot:
    input: expand('loh_plot/seg_dim_{number}/{sample}_loh_seg_dim_{number}.tsv', sample=SAMPLES,number=SEG_DIM)

rule generate_final_heatmap:
    input:d='loh_plot/seg_dim_{number}'
    output:out='loh_plot/seg_dim_{number}/heatmap_seg_dim{number}.svg'
    script:SRC_DIR+'/LOH_heatmap_sofia.R'


"""
rule NOSENSE_LOH_for_plot:
    input: loh='check/{sample}_nosense_loh.tsv',len_chr='../../../local/share/data/chr_len.tsv'
    output: tsv="nosense_loh_plot/seg_dim_{number}/{sample}_nosense_loh_seg_dim_{number}.tsv"  #10000000
    run: 
        import pandas as pd
        seg_dim=int(wildcards.number)
        data=pd.read_csv(input['loh'],sep='\t',header=0,index_col=None)
        #data_e=pd.read_csv(input['loh_e'],sep='\t',header=None,index_col=None)
        chr_len=pd.read_csv(input['len_chr'],sep='\t',header=0,index_col=None)
        chr_len['bp']=chr_len['bp'].astype('int')
        
        data['event']=['LOH_diff']*len(data)
        data=data[['chr','start','end','event']]
        
        chr_len['bp']=chr_len['bp'].astype('int')
        chr_dic={}
        for row in chr_len.iterrows():
            chr_dic[row[1]['Chromosome']]=row[1]['bp']
            
        def intersezione(start_seg,start,end_seg,end):
            intersezione=(min(end_seg,end)-max(start_seg,start))
            return intersezione

        data_seg=pd.DataFrame(columns=['chr','start','end','event','segment_id'])
        a=0
        for chr in chr_dic.keys():
            tmp=data[data['chr']==chr]
            for i in range(0,chr_dic[chr],seg_dim):
                a=a+1
                start=i+1
                end=i+seg_dim
                #cerco se esiste un segmento nel tmp che ha LOH
                tmp2=tmp[(tmp['start']<end ) & (tmp['end']>start)]
                if len(tmp2)==0:
                    riga={'chr':chr,'start':start,'end':end,'event':'NO','segment_id':a}
                    data_seg=pd.concat([data_seg,pd.DataFrame([riga])],ignore_index=True)
                else:
                    tmp2['intersezione']=tmp2.apply(lambda x: intersezione(start,x['start'],end,x['end']), axis=1)
                    evento=tmp2.loc[tmp2['intersezione'].idxmax()]
                    riga={'chr':chr,'start':start,'end':end,'event':evento['event'],'segment_id':a}
                    data_seg=pd.concat([data_seg,pd.DataFrame([riga])],ignore_index=True)

        data_seg.to_csv(output['tsv'],sep='\t',index=False)
"""
rule  all_NOSENSE_LOH_for_plot:
    input: expand('nosense_loh_plot/seg_dim_{number}/{sample}_nosense_loh_seg_dim_{number}.tsv', sample=SAMPLES,number=SEG_DIM)

rule generate_final_heatmap_nosense:
    input:d='nosense_loh_plot/seg_dim_{number}'
    output:out='nosense_loh_plot/seg_dim_{number}/heatmap_seg_dim{number}_nosense.svg'
    script:SRC_DIR+'/LOH_heatmap_nosense.R'    #100000

rule NOSENSE_LOH_for_plot:
    input: only_late='check/{sample}_nosense_loh.tsv',common='check/{sample}_common_loh.tsv',diff='final/{sample}_loh.tsv',len_chr='../../../local/share/data/chr_len.tsv'
    output: tsv="nosense_loh_plot/seg_dim_{number}/{sample}_nosense_loh_seg_dim_{number}.tsv"  #10000000
    run: 
        import pandas as pd
        seg_dim=int(wildcards.number)
        data=pd.read_csv(input['diff'],sep='\t',header=0,index_col=None)
        data_e=pd.read_csv(input['common'],sep='\t',header=0,index_col=None)
        data_l=pd.read_csv(input['only_late'],sep='\t',header=0,index_col=None)
        chr_len=pd.read_csv(input['len_chr'],sep='\t',header=0,index_col=None)
        chr_len['bp']=chr_len['bp'].astype('int')


        data['event']=['LOH_diff']*len(data)
        data_e['event']=['common']*len(data_e)
        data_l['event']=['only_late']*len(data_l)

        data=data[['chr','start','end','event']]
        data_e=data_e[['chr','start','end','event']]
        data_l=data_l[['chr','start','end','event']]

        data=pd.concat([data,data_e,data_l],ignore_index=True)
        chr_len['bp']=chr_len['bp'].astype('int')
        chr_dic={}
        for row in chr_len.iterrows():
            chr_dic[row[1]['Chromosome']]=row[1]['bp']
            
        def intersezione(start_seg,start,end_seg,end):
            intersezione=(min(end_seg,end)-max(start_seg,start))
            return intersezione

        data_seg=pd.DataFrame(columns=['chr','start','end','event','segment_id'])
        a=0
        for chr in chr_dic.keys():
            tmp=data[data['chr']==chr]
            for i in range(0,chr_dic[chr],seg_dim):
                a=a+1
                start=i+1
                end=i+seg_dim
                #cerco se esiste un segmento nel tmp che ha LOH
                tmp2=tmp[(tmp['start']<end ) & (tmp['end']>start)]
                if len(tmp2)==0:
                    riga={'chr':chr,'start':start,'end':end,'event':'NO','segment_id':a}
                    data_seg=pd.concat([data_seg,pd.DataFrame([riga])],ignore_index=True)
                else:
                    tmp2['intersezione']=tmp2.apply(lambda x: intersezione(start,x['start'],end,x['end']), axis=1)
                    evento=tmp2.loc[tmp2['intersezione'].idxmax()]
                    riga={'chr':chr,'start':start,'end':end,'event':evento['event'],'segment_id':a}
                    data_seg=pd.concat([data_seg,pd.DataFrame([riga])],ignore_index=True)

        data_seg.to_csv(output['tsv'],sep='\t',index=False)