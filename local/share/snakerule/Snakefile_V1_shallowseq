include: './conf.sk'

rule qdnaseq_test:
    input: "bamfiles_path.tsv"
    output: cn="qdnaseq/cn_log2.tsv", plot="qdnaseq/noise_filtered.pdf", image="qdnaseq/qdnaseq.RData"
    params: tool=BIN_DIR+"/qdnaseq", bin_size=BIN_SIZE, cores=CORES, dir="qdnaseq"
    shell:
        """
            mkdir -p {params.dir}
            cd {params.dir} && {params.tool} -f ../{input} -b {params.bin_size} -c {params.cores}
        """

rule qdnaseq_segment_test:
    input: rdata="qdnaseq/qdnaseq.RData"
    output: segm="qdnaseq/cn_segm.tsv", calls="qdnaseq/cn_calls.tsv"
    params: tool=BIN_DIR+"/qdnaseq_segmentation", cores=CORES
    log: "qdnaseq/segm_call.log"
    shell:
        """
            {params.tool} -r {input.rdata} -s {output.segm} -a {output.calls} -c {params.cores} &> {log}
        """

###################### "real" biobanca files block
rule qdnaseq:
    input: "{kind}_bamfiles_path.tsv"
    output: cn="{kind}_qdnaseq/cn_log2.tsv", plot="{kind}_qdnaseq/noise_filtered.png", image="{kind}_qdnaseq/qdnaseq.RData"
    params: tool=BIN_DIR+"/qdnaseq", bin_size=BIN_SIZE, cores=CORES, dir="{kind}_qdnaseq"
    shell:
        """
            mkdir -p {params.dir}
            cd {params.dir} && {params.tool} -f ../{input} -b {params.bin_size} -c {params.cores}
        """

#output: segm="{kind}_qdnaseq/cn_segm.tsv", calls="{kind}_qdnaseq/cn_calls.tsv", seg="{kind}_qdnaseq/cn_seg.seg", rdata="{kind}_qdnaseq/cn_seg.Rdata"
# -g  {output.seg}
rule qdnaseq_segment:
    input: rdata="{kind}_qdnaseq/qdnaseq.RData"
    output: segm="{kind}_qdnaseq/cn_segm.tsv", calls="{kind}_qdnaseq/cn_calls.tsv", rdata="{kind}_qdnaseq/cn_seg.Rdata"
    params: tool=BIN_DIR+"/qdnaseq_segmentation", cores=CORES
    log: "{kind}_qdnaseq/segm_call.log"
    shell:
        """
            {params.tool} -r {input.rdata} -s {output.segm} -a {output.calls} -c {params.cores} -o {output.rdata} &> {log}
        """

def get_exp_pairs(wildcards):
    if wildcards.which == "xo":
        return PAIRS
    else:
        return PAIRS_H

rule qdnaseq_segment_correlate:
    input: pdo="pdo_qdnaseq/cn_segm.tsv", xeno="xeno_qdnaseq/cn_segm.tsv"
    output: heatmap="heatmap_cors_{which}.pdf", pearson="pearson_{which}.tsv", rdata="pearson_{which}.Rdata", density="density_cors_{which}.pdf"
    params: expected_pairs=get_exp_pairs
    script: SRC_DIR+"/comparisons_bin_qdnaseq_snake.R"

## gistic online https://cloud.genepattern.org/gp/pages/index.jsf?lsid=urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00125:6.15.28#
rule segmentation_for_gistic:
    input: rdata="{kind}_qdnaseq/cn_seg.Rdata"
    output: seg="{kind}.seg"
    params: tool=BIN_DIR+"/qdnaseq_my_segm"
    shell:
        """
            {params.tool} -r {input.rdata} -s {output.seg}
        """

    ####################

tests = {
    'CRC0327-04-0': 5,
    'CRC1078-02-0': 6,
    'CRC1078-02-1-C': 7
}
rule seqtobin:
    input: cn="qdnaseq_multi/cn_log2.tsv"
    output: "qdnaseq_multi/{s}.tsv.gz"
    params: tool=BIN_DIR+"/project_bin", s= lambda wildcards: tests[wildcards.s]
    shell: 
        """    
            {params.tool} -c <(sed 1d {input.cn} |  cut -f 2,3,4,{params.s} | sort -k1,1n -k2,2n | bawk '{{print "chr"$1,$2-1,$3,2**$4}}') -b 15000| gzip > {output}
        """

