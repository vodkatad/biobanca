include: './conf.sk'

rule qdnaseq_test:
    input: "bamfiles_path.tsv"
    output: cn="qdnaseq/cn_log2.tsv", plot="qdnaseq/noise_filtered.pdf", image="qdnaseq/qdnaseq.RData"
    params: tool=BIN_DIR+"/qdnaseq", bin_size=BIN_SIZE, cores=CORES, dir="qdnaseq"
    shell:
        """
            mkdir -p {params.dir}
            cd {params.dir} && {params.tool} -f ../{input} -b {params.bin_size} -c {params.cores}
        """

rule qdnaseq_segment_test:
    input: rdata="qdnaseq/qdnaseq.RData"
    output: segm="qdnaseq/cn_segm.tsv", calls="qdnaseq/cn_calls.tsv"
    params: tool=BIN_DIR+"/qdnaseq_segmentation", cores=CORES
    log: "qdnaseq/segm_call.log"
    shell:
        """
            {params.tool} -r {input.rdata} -s {output.segm} -a {output.calls} -c {params.cores} &> {log}
        """

###################### "real" biobanca files block
rule qdnaseq:
    input: "{kind}_bamfiles_path.tsv"
    output: cn="{kind}_qdnaseq/cn_log2.tsv", plot="{kind}_qdnaseq/noise_filtered.png", image="{kind}_qdnaseq/qdnaseq.RData"
    params: tool=BIN_DIR+"/qdnaseq", bin_size=BIN_SIZE, cores=CORES, dir="{kind}_qdnaseq"
    shell:
        """
            mkdir -p {params.dir}
            cd {params.dir} && {params.tool} -f ../{input} -b {params.bin_size} -c {params.cores}
        """

#output: segm="{kind}_qdnaseq/cn_segm.tsv", calls="{kind}_qdnaseq/cn_calls.tsv", seg="{kind}_qdnaseq/cn_seg.seg", rdata="{kind}_qdnaseq/cn_seg.Rdata"
# -g  {output.seg}
rule qdnaseq_segment:
    input: rdata="{kind}_qdnaseq/qdnaseq.RData"
    output: segm="{kind}_qdnaseq/cn_segm.tsv", calls="{kind}_qdnaseq/cn_calls.tsv", rdata="{kind}_qdnaseq/cn_seg.Rdata"
    params: tool=BIN_DIR+"/qdnaseq_segmentation", cores=CORES
    log: "{kind}_qdnaseq/segm_call.log"
    shell:
        """
            {params.tool} -r {input.rdata} -s {output.segm} -a {output.calls} -c {params.cores} -o {output.rdata} &> {log}
        """

def get_exp_pairs(wildcards):
    if wildcards.which == "xo":
        return PAIRS
    else:
        return PAIRS_H

rule qdnaseq_segment_correlate:
    input: pdo="pdo_qdnaseq/cn_segm.tsv", xeno="xeno_qdnaseq/cn_segm.tsv"
    output: heatmap="heatmap_cors_{which}.pdf", pearson="pearson_{which}.tsv", rdata="pearson_{which}.Rdata", density="density_cors_{which}.pdf"
    params: expected_pairs=get_exp_pairs
    script: SRC_DIR+"/comparisons_bin_qdnaseq_snake.R"

rule qdnaseq_segment_correlate_filterTRUE_svg:
    #input: pdo="pdo_qdnaseq/cn_segm.tsv", xeno="xeno_qdnaseq/cn_segm.tsv", good=PRJ_ROOT+'/local/share/data/biobanca_pdo_buoni.tsv', Rimage=PRJ_ROOT+'/dataset/V1/theme_20.Rdata'
    input: pdo="pdo_qdnaseq/cn_segm.tsv", xeno="xeno_qdnaseq/cn_segm.tsv", good=PRJ_ROOT+'/local/share/data/biobanca_pdo_buoni.tsv', Rimage=PRJ_ROOT+'/dataset/V1/theme_5.Rdata'
    output: heatmap="validated_heatmap_cors_{which}.svg", pearson="validated_pearson_{which}.tsv", rdata="validated_pearson_{which}.Rdata", density="validated_density_cors_{which}.svg",
            longgen_list="validated_heatmap_list_{which}.tsv"
    params: expected_pairs=get_exp_pairs
    log: "validated_heatmap_cors_{which}.log"
    script: SRC_DIR+"/comparisons_bin_qdnaseq_snake_filter_true.R"

rule pearson_mannw:
    input: rdata="validated_pearson_{which}.Rdata"
    output: mw="validated_pearson_{which}_mw.txt"
    shell:
        """
        Rscript -e 'load("{input.rdata}");  tapply(pdata$pearson, pdata$type, summary); wilcox.test(formula=as.formula("pearson~type"), data=pdata)$p.value' > {output}
        """

# validated xo cn matrixes 
rule validated_cn_log2:
    input: rdata='validated_pearson_xo.Rdata'
    output: xeno='xeno_segm_l2fc.tsv.gz', pdo='pdo_segm_l2fc.tsv.gz'
    script: SRC_DIR+'/save_cn.R'


# project to bin
rule seqtobin:
    input: "{kind}_segm_l2fc.tsv.gz"
    output: "{kind}.{bin}.tsv.gz"
    params: tool=BIN_DIR+"/project_bin_multi"
    shell: 
        """    
            zcat {input} | head -n1 | bawk '{{print "chr","b","e",$0}}' > {output}.tmp || echo 'ciao'
            {params.tool} -c <(zcat {input} | sed 1d |  tr ":" "\\t" | sed 's/-/\\t/1' | bawk '{{print "chr"$1,$2-1,$3,$0}}' | cut -f 4,5,6 --complement) -b {wildcards.bin} >> {output}.tmp
            gzip -c {output}.tmp > {output}
            rm {output}.tmp
        """

def heatmap_in(wildcards):
    if wildcards.bin == "orig":
        return wildcards.kind+'_segm_l2fc.tsv.gz'
    else:
        return wildcards.kind+'.'+wildcards.bin+'.tsv.gz'

# enormous svg https://stackoverflow.com/questions/51418310/matplotlib-multiple-scatter-subplots-reduce-svg-file-size :(
# stopped at 900M for orig, 50Mb for 1500000 bins
rule heatmap:
    #input: "{kind}_segm_l2fc.tsv.gz"
    #input: "{kind}.1500000.tsv.gz"
    input: heatmap_in
    output: "{kind}_{bin}_heatmap_{mute}.pdf"
    run:
        import numpy as np
        import pandas as pd
        import seaborn as sns
        import matplotlib.colors as colors
        import matplotlib 
        import matplotlib.cm as cm
        import matplotlib.ticker as ticker
        import matplotlib.pyplot as plt
        import matplotlib.colors as colors
        import matplotlib.transforms as transforms

        cnvs = pd.read_csv(input[0], sep="\t") 
        
        if wildcards.bin == 'orig':
            split1 = [x.split(':') for x in cnvs.index.values]
            split2 = [x[1].split('-') for x in split1]
            boundaries = pd.DataFrame(data={'chr':[x[0] for x in split1], 'b': [x[0] for x in split2], 'e': [x[1] for x in split2]})
            cnvs = cnvs.transpose()
        else:
            boundaries = cnvs[['chr','b','e']].copy()
            cnvs = cnvs.drop(columns=['chr','b','e']).transpose()

        #chr_limits = boundaries.index[boundaries['e'].isin(boundaries.groupby('chr', sort=False)['e'].max().values)].tolist()
        i = 0
        chr_limits = []
        last = ""
        for index, row in boundaries.iterrows():
            if last != "" and last != row['chr']:
                chr_limits.append(i-1)
            last = row['chr']
            i = i + 1        
        chr_limits.append(i-1)

        chr_boundaries = np.append(0, chr_limits)
        chr_list = boundaries['chr'].unique().tolist()
        chrN_list = []

        for x in chr_list:
            if wildcards.bin != "orig":
                x = x[3:] #remove 'chr' for readability
            chrN_list.append(x)

        #compute the position where chromosome labels will be placed on the plots
        start = 0
        pos_list = []
        for end in chr_limits:
            pos_list.append((start+end)/2)
            start = end+1

        yticklabels = False

        #cbar_kws={"ticks": np.arange(0,13,1)}
        maxv = cnvs.max().max()
        minv = cnvs.min().min()
        h = sns.clustermap(cnvs, col_cluster=False, row_cluster=False, yticklabels = False, cmap='RdBu_r', robust=True, center=0, rasterized=True)# cbar_kws=cbar_kws)
        #h = sns.clustermap(cnvs, col_cluster=False, row_cluster=False, yticklabels = False, cmap='RdBu_r', robust=True, center=0)# cbar_kws=cbar_kws)
        #h = sns.clustermap(cnvs, col_cluster=False, row_cluster=False, yticklabels = False, cmap='bwr', vmax=maxv, vmin=minv, center=0)# cbar_kws=cbar_kws)
        #h = sns.clustermap(cnvs, col_cluster=False, row_cluster=False, yticklabels = False, cmap='coolwarm', robust=True, center=0)# cbar_kws=cbar_kws)
        #Z = h.dendrogram_row.linkage
        ax = h.ax_heatmap
		#ax.set_rasterization_zordeset_rasterization_zorderr(1)
        #place vertical lines to identify chromosomes
        for pos in chr_limits:
            ax.axvline(x=pos, color='black', linewidth=0.3)

        #place chromosome ticks at the right position
        ax.xaxis.set_major_locator(ticker.FixedLocator((pos_list)))
        if wildcards.mute != "mute":
            ax.xaxis.set_major_formatter(ticker.FixedFormatter((chrN_list)))
        #ax.tick_params(axis='x', rotation=0, labelsize=5)
        ax.tick_params(axis='x', rotation=0, labelsize=5)
        ax.xaxis.set_minor_locator(ticker.FixedLocator(chr_boundaries))
        ax.tick_params(axis='x', length=8, which='minor')
        
        # legend is not a leged but a ax_cbar
        cax = plt.gcf().axes[-1]
        cax.tick_params(labelsize=3) # nope

        #ax.set_xlabel("Chromosomes", fontweight='bold', fontsize=25)
        #ax.set_ylabel("Clones", fontsize=25, fontweight='bold')
        # A4 is 8-1/4 x 11-3/4 in
        plt.gcf().set_size_inches(7, 3.8) # w, h
        # cannot find a way to get tolerable linewidth cause linewidth parameter seem to be ignored, will
        # scale by hand
        #plt.gcf().set_size_inches(37, 21)
        plt.savefig(output[0], dpi=300)
        plt.clf()

## gistic online https://cloud.genepattern.org/gp/pages/index.jsf?lsid=urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00125:6.15.28#
rule segmentation_for_gistic:
    input: rdata="{kind}_qdnaseq/cn_seg.Rdata"
    output: seg="{kind}.seg"
    params: tool=BIN_DIR+"/qdnaseq_my_segm"
    shell:
        """
            {params.tool} -r {input.rdata} -s {output.seg}
        """

rule segmentation_for_gistic_filterTRUE:
    input: rdata="{kind}_qdnaseq/cn_seg.Rdata", good=PRJ_ROOT+'/local/share/data/biobanca_pdo_buoni.tsv'
    output: seg="{kind}_TRUE.seg"
    params: tool=BIN_DIR+"/qdnaseq_my_segm_filterTRUE"
    shell:
        """
            {params.tool} -r {input.rdata} -s {output.seg} -g {input.good}
        """

# rule gistic      
# https://cloud.genepattern.org/gp/pages/index.jsf?lsid=urn:lsid:broad.mit.edu:cancer.software.genepattern.module.analysis:00125:6.15.28
# module GISTIC_2.0, input those two seg, refseq hg38, no other parameters set, everything kept as default (gene gistic * yes included)
######################

tests = {
    'CRC0327-04-0': 5,
    'CRC1078-02-0': 6,
    'CRC1078-02-1-C': 7
}
rule seqtobin_single:
    input: cn="qdnaseq_multi/cn_log2.tsv"
    output: "qdnaseq_multi/{s}.tsv.gz"
    params: tool=BIN_DIR+"/project_bin", s= lambda wildcards: tests[wildcards.s]
    shell: 
        """    
            {params.tool} -c <(sed 1d {input.cn} |  cut -f 2,3,4,{params.s} | sort -k1,1n -k2,2n | bawk '{{print "chr"$1,$2-1,$3,2**$4}}') -b 15000| gzip > {output}
        """


## specific plots in cn_plots now produced running segmentation_plots.R by hand, TODO add rule

rule diagonal:
    input: "pearson_xo.tsv"
    output: "diagonal_xo.tsv"
    shell:
        """
            Rscript -e 'd <- read.table("{input[0]}", sep="\\t", header=TRUE); res <- data.frame(smodel=substr(rownames(d), 0,7), pearson=diag(as.matrix(d))); write.table(res, file="{output[0]}", sep="\\t", row.names=F, quote=F);'
        """

rule souce_data_3:
    input: pearson_3a="validated_pearson_xo.tsv", freq_3c_tcga="freqs_pdo_tcga.tsv", freq_3c_msk="freqs_pdo_msk.tsv"
    output: "SOURCE_DATA_Figure_3_A_C.xlsx"
    shell:
        """
            tsv_to_xls -i {input.pearson_3a},{input.freq_3c_tcga},{input.freq_3c_msk} -o {output} -s 'Fig. 3A, Fig. 3C TCGA, Fig. 3C MSK'
        """

rule souce_data_suppl_7:
    input: freq_3c_tcga="freqs_xeno_tcga.tsv", freq_3c_msk="freqs_xeno_msk.tsv"
    output: "SOURCE_DATA_Suppl_Fig_7.xlsx"
    shell:
        """
            tsv_to_xls -i {input.freq_3c_tcga},{input.freq_3c_msk} -o {output} -s 'Suppl Fig. 7 TCGA, Suppl Fig. 7 MSK'
        """
## Gistic genes scores

rule delta_gistic:
    input: pdo=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_pdo/all_data_by_genes.txt',
           pdx=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_xeno/all_data_by_genes.txt'
    output: delta='genes_delta_gistic.tsv', delta_plot='delta_gistic_heatmap.pdf'
    params: expected_pairs=125 # from validated_heatmap_cors_xo.log
    script: SRC_DIR+'/genes_delta_gistic.R'


# but we want overall gistic scores, not foreach sample
#Type    Chromosome      Start   End     -log10(q-value) G-score average amplitude       frequency
#Amp      1      870001  1635000 0.247925        0.091830        0.531174        0.086667
#Amp      1      1665001 1845000 0.338308        0.097419        0.520454        0.093333
#Amp      1      1845001 2655000 0.247925        0.091584        0.495594        0.093333
rule project_gistic_score:
    input: gistic=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_{kind}/scores.gistic', genes=SNAKE_ROOT+'/prj/magnum/dataset/cn2/gencode_type_protein_coding.bed'
    output: "genes_scores_{kind}.tsv"
    shell:
        """
            sed 1d {input.gistic} | bawk '$1=="Amp"{{print "chr"$2, $3-1,$4,$6}} $1=="Del" {{print "chr"$2, $3-1,$4,-$6}}' | sort -k1,1 -k2,2n > {output}.bed
            bedtools intersect -wo -a {input.genes} -b {output}.bed  | cut -f 4,8 | sort | uniq > {output}
            rm {output}.bed
        """

rule delta_gistic_overall:
    input: pdo="genes_scores_pdo.tsv",
           pdx="genes_scores_xeno.tsv"
    output: delta='overallgenes_delta_gistic.tsv', delta_plot='overalldelta_gistic_histo.pdf', scores_plot="overall_gistic_cor.pdf"
    script: SRC_DIR+'/genes_delta_gistic_overall.R'

rule gistic_vs_tcga_thresholded_genes:
    input: us=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_{kind}/all_thresholded.by_genes.txt', tcga=PRJ_ROOT+'/local/share/data/shallowseq/gistic/crc_gistic.txt',  
           Rimage=PRJ_ROOT+'/dataset/V1/theme_5.Rdata'
    output: corrplot='{kind}_vs_tcga.pdf', corrs='{kind}_vs_tcga.tsv', sourcedata="freqs_{kind}_tcga.tsv"
    log: log='{kind}_vs_tcga.log'
    script: SRC_DIR+'/gistic_genes_thr_vs_tcga.R'

# gistic on msk run by hand with hg19 and all other parameters == ours data,
# downloaded from http://www.cbioportal.org/study/cnSegments?id=crc_msk_2017
# then removed repeated lines with (discovered thanks to gistic error):
# data@rotpunkt:~/Dropbox/work/biobanca/msk$ head -n1 crc_msk_2017_segments.seg > crc_msk_2017_segments_uniq.seq
# data@rotpunkt:~/Dropbox/work/biobanca/msk$ sed 1d crc_msk_2017_segments.seg | sort | uniq | sort -k1,1 -k2,2 >> crc_msk_2017_segments_uniq.seq 

rule gistic_vs_msk_thresholded_genes:
    input: us=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_{kind}/all_thresholded.by_genes.txt', msk=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_msk/all_thresholded.by_genes.txt',
           Rimage=PRJ_ROOT+'/dataset/V1/theme_5.Rdata'
    output: corrplot='{kind}_vs_msk.pdf', corrs='{kind}_vs_msk.tsv', sourcedata="freqs_{kind}_msk.tsv"
    log: log='{kind}_vs_msk.log'
    script: SRC_DIR+'/gistic_genes_thr_vs_msk.R'

rule gistic_pdo_vs_pdx:
    input: pdx=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_xeno/all_thresholded.by_genes.txt', pdo=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_pdo/all_thresholded.by_genes.txt',
           Rimage=PRJ_ROOT+'/dataset/V1/theme_5.Rdata'
    output: corrplot='gistic_pdo_vs_pdx.pdf', corrs='gistic_pdo_vs_pdx.tsv'
    log: log='gistic_x_vs_o.log'
    script: SRC_DIR+'/gistic_genes_thr_x_vs_o.R'

rule gistic_oncoprint:
    input: xeno=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_xeno/all_thresholded.by_genes.txt',
           pdo=PRJ_ROOT+'/local/share/data/shallowseq/gistic/gistic_pdo/all_thresholded.by_genes.txt',
           Rimage=PRJ_ROOT+'/dataset/V1/theme_5.Rdata'
    output: op="oncoprint_{top}.svg", op_data="oncoprint_{top}.RData", pie="oncoprint_pie_{top}.pdf"
    script: SRC_DIR+"/oncoprint_cnv_diff.R"
