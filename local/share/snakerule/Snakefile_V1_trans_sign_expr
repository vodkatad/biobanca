include: 'conf.sk'

#input: "LMO_BASALE_replicates.tsv", "LMX_BASALE_replicates.tsv", "LMH_replicates.tsv"
rule all_get_replicates:
    input: expand('{sclass}_replicates_pruned.tsv', sclass=CLASSES)

rule get_replicates:
    input: metadata=MEDA
    output: replicates='{sclass}_replicates.tsv'
    script: SRC_DIR+'/Genealogy_Replicates.R'

rule replicates_correlation:
    input: metadata=MEDA, replicates='{sclass}_replicates.tsv', expr=VSD
    output: replicates_correlation='{sclass}_replicates_correlation.tsv', 
            summary='{sclass}_replicates_summary.txt'
    script: SRC_DIR+'/Genealogy_VSD_correlation.R'

rule list_of_replicated_samples:
    input: '{sclass}_replicates_pruned.tsv'
    output: '{sclass}_replicates_samples.tsv'
    shell:
        """
            sed 1d {input} | cut -f 4 | tr "," "\\n" > {output}
        """

rule mean_btw_genealogy:
    input: metadata=MEDA, replicates='{sclass}_replicates_pruned.tsv', expr=VSD
    output: mean_btw_genealogy = '{sclass}_mean_gene_genealogy.tsv'
    script: SRC_DIR+'/mean_gene_genealogy.R' 


# We need to add back the expression of samples without replicates
# We know that genes are in the same order so we can simply cat the two files
#egrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ head -n1  LMX_BASALE_mean_gene_genealogy.tsv | tr "\t" "\n" > genes_r
#egrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ zcat  /mnt/trcanmed/snaketree/prj/DE_RNASeq/dataset/Biodiversa_up5_starOK_selected/vsd.tsv.gz | cut -f 1 | sed 1d > genes_h
#wc -l genesegrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ wc -l genes_?
# 33667 genes_h
# 33667 genes_r
# 67334 total
#egrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ diff -q genes_h  genes_r ; echo $?
#0
# TODO add rule that does this check to sleep without issues in the future.
rule add_no_replicates:
    input: metadata=MEDA, expr=VSD, mean_expr='LMX_BASALE_mean_gene_genealogy.tsv', repli='LMX_BASALE_replicates_samples.tsv'
    output: 'LMX_BASALE_mean_gene_genealogyall.tsv.gz'
    params: sclass="LMX_BASALE"
    shell:
        """
            sed 1d {input.metadata} | grep -w {params.sclass} | cut -f 1 | filter_1col -v 1 {input.repli} > {output}.tmp
            cat {input.mean_expr} > {output}.tmp2
            zcat {input.expr} | bawk 'NR==1{{print 'Gene',$0}} NR!=1{{print $0}}' | transpose | sed 1d | \
            filter_1col 1 {output}.tmp | bawk '{{M=substr($1,0,7);$1="";print M,$0}}' | cut -f 2 --complement >> {output}.tmp2
            gzip -c {output}.tmp2 > {output}
            rm {output}.tmp*
        """

# thr3_correlations_rsquared.tsv
# thr4 ...
# add wildcard to outfile and out_dir
# add parameter to Correlations_LMO_LMX-v2 to get the threshold ({wildcards.thr})
rule correlation_LMO_LMX:
    input: lmx='LMX_BASALE_mean_gene_genealogyall.tsv.gz',
           lmo='LMO_BASALE_mean_gene_genealogyall.tsv.gz'
    output: outfile = "correlations_rsquared.tsv", outfile2 = "LMX-LMO_correlation_smodelCoupled.tsv", out_dir=directory('plot_residuals')
    params: tool=BIN_DIR+"/Correlation_LMO_LMX-v2"
    shell:
        """
            rm -rf {output.out_dir}
            mkdir {output.out_dir}
            {params.tool} -x {input.lmx} -o {input.lmo} -r {output.outfile} -d {output.out_dir} -m {output.outfile2}
        """

rule correlation_LMX_LMO_simo:
    input: simo=SIMOUNIQ, expr=VSD, metadata=MEDA, right=RIGHT
    params: tool=BIN_DIR+"/Correlation_LMX-LMO_SimoCoupled"
    output: outfile = "LMX-LMO_correlation_simo.tsv.gz"
    shell:
        """
            {params.tool} -s {input.simo} -v {input.expr} -m {input.metadata} -r {input.right} -o {output.outfile}
        """

rule pheatmap:
    input: correlation_matrix="LMX-LMO_correlation_simo.tsv.gz"
    output: pheatmap="pheatmap_correlation.png"
    script: SRC_DIR+'/pheatmap.R'

rule pheatmap_all:
    input: correlation_matrix="LMX-LMO_correlation_smodelCoupled.tsv"
    output: pheatmap="pheatmap_correlation_smodel.png"
    script: SRC_DIR+'/pheatmap.R'


rule obtain_density_plot_wilcox:
    input: res="LMX-LMO_correlation_smodelCoupled.tsv"
    output: density_plot = "density_f.pdf", wilcox_result ="wilcox"
    script: SRC_DIR+'/matched_unmatched_plot_wilcox.R'


rule obtain_density_plot_wilcox_simo:
    input: res="LMX-LMO_correlation_simo.tsv.gz"
    output: density_plot = "density_f_simo.pdf", wilcox_result ="wilcox_simo"
    script: SRC_DIR+'/matched_unmatched_plot_wilcox.R'



### Study genes with high studentized residuals in correlations
rule threshold_residual:
    input: "plot_residuals"
    output: "genes_occurrence_overthr-{thr}.tsv"
    shell:
        """
            cat {input}/*tsv | grep -v -w residuals | bawk '$2 > {wildcards.thr} || $2 < -{wildcards.thr} {{print $1}}' | sed 's/^H_//1' > {output}
        """

rule universe_residual:
    input: "plot_residuals"
    output: "genes_residuals_universe.tsv"
    shell:
        """
            cat {input}/*tsv | grep -v -w residuals | cut -f1 | sed 's/^H_//1' | sort | uniq > {output}
        """
        
rule gene_residuals_plots:
    input: residuals = "genes_occurrence_overthr-{thr}.tsv"
    output: gene_plot = "gene_res-{thr}.pdf", gene_plot_zoom = "gen_res_zoom-{thr}.pdf", gene_res_freq = "gene_residual_frequency-{thr}.tsv"
    script: SRC_DIR+'/Gene_residual_plots.R'
    
### Enrichment analysis

# -2 is the threshold on the magnitude of studentized residual that are considered as outliers
# this rules instead selects only the genes that are considered outliers in more than a given fraction of pairs LMO-LMX
rule gsea_analysis_plot:
    input: gene_res_freq = "gene_residual_frequency-2.tsv"
    output: GSEA_r = "GSEA_results.tsv", GSEA_ridgeplot = "gsea_ridgeplot.pdf"
    script: SRC_DIR+'/GSEA_analysis.R'

rule threshold_residual_freq:
    input: genes_freq = "gene_residual_frequency-2.tsv"
    output: gene_list= "gene_outlier_frequency-{thr}.tsv"
    shell: 
        """
         sed 1d {input.genes_freq} | bawk '$2 > {wildcards.thr} {{print $1}}' > {output.gene_list}
        """

rule go_analysis_plot:
    input: gene_list= "gene_outlier_frequency-{thr}.tsv", gene_univ = "genes_residuals_universe.tsv"
    output: GO_r = "GO_results-{thr}.tsv", out_dir = directory("go_barplot-{thr}")
    script: SRC_DIR+'/GO_analysis.R'

### CMS caller

rule genes_for_cms:
    input: expr=VSD
    output: VSD_f = "VSD_f.tsv"
    script: SRC_DIR+'/Prepare_Table_CMScaller.R'

rule get_symbols:
    input: VSD_f = "VSD_f.tsv"
    output: "VSD_genes.tsv"
    params: tool=SRC_DIR+"/add_description.R"
    shell:
        """
            {params.tool} -i {input.VSD_f} -o {output} -n 1  -f SYMBOL -t ENTREZID -d
        """

rule CMS:
    input: expr = VSD, VSD_genes = "VSD_genes.tsv"
    output: RES = "CMScaller.tsv", CMS_heatmap = "CMS_heatmap.pdf"
    script: SRC_DIR+ '/CMScaller.R'

rule CMStype:
    input: expr = VSD, metadata = MEDA, VSD_genes = "VSD_genes.tsv"
    output: RES = "{sclass}_CMScaller.tsv", CMS_heatmap = "{sclass}_CMS_heatmap.pdf"
    script: SRC_DIR+ '/CMScallertype.R'

rule get_model_cms:
    input: simo="../cris/SIMO_v2.tsv", pdo="LMO_BASALE_CMScaller.tsv", pdx="LMX_BASALE_CMScaller.tsv"
    output: results="model_cms.tsv"
    log: "model_cms.log"
    script: SRC_DIR+ '/CMS_simo.R'


rule get_symbols_cms_cris:
    input: VSD_f = "/home/mferri/gene_expr_cms.tsv"
    output: "gene_expr_cms_crisl.tsv"
    params: tool=SRC_DIR+"/add_description.R"
    shell:
        """
            {params.tool} -i {input.VSD_f} -o {output} -n 1  -f SYMBOL -t ENTREZID -d
        """

###TODO: add flag for NA and file from conf?
rule sankey:
    input: "model_cms.tsv"
    output: "sankey_model_cms.png"
    script: SRC_DIR+"/sankey_classification.R"

### clustering

rule get_clustering:
    input: expr = "/scratch/trcanmed/DE_RNASeq/dataset/Class_comparison_biobanca/Cutoff0.05_LFC0.584/vsd_clustering.tsv.gz"
    output: boot = "clustering_true_boot.png", dendro = "dendrogram_clustering.png", clust_res = "count_clustering_model.tsv", pvals = "pvalue_counts.tsv"
    script: SRC_DIR+"/clustering_fin.R"

rule get_clustering_sds:
    input: expr = "/scratch/trcanmed/DE_RNASeq/dataset/Class_comparison_biobanca/Cutoff0.05_LFC0.584/vsd_clustering_sds.tsv.gz"
    output: boot = "clustering_true_boot_sds.png", dendro = "dendrogram_clustering_sds.png", clust_res = "count_clustering_model_sds.tsv", pvals = "pvalue_counts_sds.tsv"
    script: SRC_DIR+"/clustering_fin.R"

rule get_clustering_sds_xo:
    input: expr = "/scratch/trcanmed/DE_RNASeq/dataset/Class_comparison_biobanca/Cutoff0.05_LFC0.584/vsd_clustering_sds_xo.tsv.gz"
    output: boot = "clustering_true_boot_sds_xo.png", dendro = "dendrogram_clustering_sds_xo.png", clust_res = "count_clustering_model_sds_xo.tsv", pvals = "pvalue_counts_sds_xo.tsv"
    script: SRC_DIR+"/clustering_fin.R"