include: 'conf.sk'

#input: "LMO_BASALE_replicates.tsv", "LMX_BASALE_replicates.tsv", "LMH_replicates.tsv"
rule all_get_replicates:
    input: expand('{sclass}_replicates_pruned.tsv', sclass=CLASSES)

rule get_replicates:
    input: metadata=MEDA
    output: replicates='{sclass}_replicates.tsv'
    script: SRC_DIR+'/Genealogy_Replicates.R'

rule replicates_correlation:
    input: metadata=MEDA, replicates='{sclass}_replicates.tsv', expr=VSD
    output: replicates_correlation='{sclass}_replicates_correlation.tsv', 
            summary='{sclass}_replicates_summary.txt'
    script: SRC_DIR+'/Genealogy_VSD_correlation.R'

rule list_of_replicated_samples:
    input: '{sclass}_replicates_pruned.tsv'
    output: '{sclass}_replicates_samples.tsv'
    shell:
        """
            sed 1d {input} | cut -f 4 | tr "," "\\n" > {output}
        """

rule mean_btw_genealogy:
    input: metadata=MEDA, replicates='{sclass}_replicates_pruned.tsv', expr=VSD
    output: mean_btw_genealogy = '{sclass}_mean_gene_genealogy.tsv'
    script: SRC_DIR+'/mean_gene_genealogy.R' 


# We need to add back the expression of samples without replicates
# We know that genes are in the same order so we can simply cat the two files
#egrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ head -n1  LMX_BASALE_mean_gene_genealogy.tsv | tr "\t" "\n" > genes_r
#egrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ zcat  /mnt/trcanmed/snaketree/prj/DE_RNASeq/dataset/Biodiversa_up5_starOK_selected/vsd.tsv.gz | cut -f 1 | sed 1d > genes_h
#wc -l genesegrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ wc -l genes_?
# 33667 genes_h
# 33667 genes_r
# 67334 total
#egrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ diff -q genes_h  genes_r ; echo $?
#0
# TODO add rule that does this check to sleep without issues in the future.
rule add_no_replicates:
    input: metadata=MEDA, expr=VSD, mean_expr='LMX_BASALE_mean_gene_genealogy.tsv', repli='LMX_BASALE_replicates_samples.tsv'
    output: 'LMX_BASALE_mean_gene_genealogyall.tsv.gz'
    params: sclass="LMX_BASALE"
    shell:
        """
            sed 1d {input.metadata} | grep -w {params.sclass} | cut -f 1 | filter_1col -v 1 {input.repli} > {output}.tmp
            cat {input.mean_expr} > {output}.tmp2
            zcat {input.expr} | bawk 'NR==1{{print 'Gene',$0}} NR!=1{{print $0}}' | transpose | sed 1d | \
            filter_1col 1 {output}.tmp | bawk '{{M=substr($1,0,7);$1="";print M,$0}}' | cut -f 2 --complement >> {output}.tmp2
            gzip -c {output}.tmp2 > {output}
            rm {output}.tmp*
        """

# thr3_correlations_rsquared.tsv
# thr4 ...
# add wildcard to outfile and out_dir
# add parameter to Correlations_LMO_LMX-v2 to get the threshold ({wildcards.thr})
# we don't need to eliminate wrong CRC177 with coppie Simo because all PDO are from LMX0B and we have LMX0A

rule correlation_LMO_LMX:
    input: lmx='LMX_BASALE_mean_gene_genealogyall.tsv.gz',
           lmo='LMO_BASALE_mean_gene_genealogyall.tsv.gz'
    output: outfile = "correlations_rsquared.tsv", outfile2 = "LMX-LMO_correlation_smodelCoupled.tsv", out_dir=directory('plot_residuals')
    params: tool=BIN_DIR+"/Correlation_LMO_LMX-v2"
    shell:
        """
            rm -rf {output.out_dir}
            mkdir {output.out_dir}
            {params.tool} -x {input.lmx} -o {input.lmo} -r {output.outfile} -d {output.out_dir} -m {output.outfile2}
        """

rule correlation_LMX_LMO_simo:
    input: simo=SIMOUNIQ, expr=VSD, metadata=MEDA, right=RIGHT
    params: tool=BIN_DIR+"/Correlation_LMX-LMO_SimoCoupled"
    output: outfile = "LMX-LMO_correlation_simo.tsv.gz"
    shell:
        """
            {params.tool} -s {input.simo} -v {input.expr} -m {input.metadata} -r {input.right} -o {output.outfile}
        """

rule cor_pdo_buoni_filter:
    input: simo_cor = "LMX-LMO_correlation_simo.tsv.gz", pdo = BUONI
    output: res = "LMX-LMO_correlation_simo_buoni.tsv.gz"
    script: SRC_DIR+"/correlation_pdo_filter.R"

rule pheatmap:
    input: correlation_matrix="LMX-LMO_correlation_simo.tsv.gz"
    output: pheatmap="pheatmap_correlation.pdf"
    script: SRC_DIR+'/pheatmap.R'

rule pheatmap_buoni:
    input: correlation_matrix="LMX-LMO_correlation_simo_buoni.tsv.gz"
    output: pheatmap="pheatmap_correlation_buoni.pdf"
    script: SRC_DIR+'/pheatmap.R'

rule pheatmap_all:
    input: correlation_matrix="LMX-LMO_correlation_smodelCoupled.tsv"
    output: pheatmap="pheatmap_correlation_smodel.pdf"
    script: SRC_DIR+'/pheatmap.R'


rule obtain_density_plot_wilcox:
    input: res="LMX-LMO_correlation_smodelCoupled.tsv"
    output: density_plot = "density_f.pdf", wilcox_result ="wilcox"
    script: SRC_DIR+'/matched_unmatched_plot_wilcox.R'


rule obtain_density_plot_wilcox_simo:
    input: res="LMX-LMO_correlation_simo.tsv.gz"
    output: density_plot = "density_f_simo.pdf", wilcox_result ="wilcox_simo"
    script: SRC_DIR+'/matched_unmatched_plot_wilcox.R'

rule obtain_density_plot_wilcox_simo_buoni:
    input: res="LMX-LMO_correlation_simo_buoni.tsv.gz"
    output: density_plot = "density_f_simo_buoni.pdf", wilcox_result ="wilcox_simo_buoni"
    script: SRC_DIR+'/matched_unmatched_plot_wilcox.R'

rule obtain_density_plot_wilcox_clustering:
    input: res="LMX-LMO_correlation_smodelCoupled.tsv", clu="count_clustering_model.tsv"
    output: density_plot = "density_f_clustering.pdf", wilcox_result ="wilcox_clustering"
    script: SRC_DIR+'/matched_unmatched_plot_wilcox_filterclu.R'

### Study genes with high studentized residuals in correlations
rule threshold_residual:
    input: "plot_residuals"
    output: "genes_occurrence_overthr-{thr}.tsv"
    shell:
        """
            cat {input}/*tsv | grep -v -w residuals | bawk '$2 > {wildcards.thr} || $2 < -{wildcards.thr} {{print $1}}' | sed 's/^H_//1' > {output}
        """

rule universe_residual:
    input: "plot_residuals"
    output: "genes_residuals_universe.tsv"
    shell:
        """
            cat {input}/*tsv | grep -v -w residuals | cut -f1 | sed 's/^H_//1' | sort | uniq > {output}
        """
        
rule gene_residuals_plots:
    input: residuals = "genes_occurrence_overthr-{thr}.tsv"
    output: gene_plot = "gene_res-{thr}.pdf", gene_plot_zoom = "g -0.97en_res_zoom-{thr}.pdf", gene_res_freq = "gene_residual_frequency-{thr}.tsv"
    script: SRC_DIR+'/Gene_residual_plots.R'
    
### Enrichment analysis

# -2 is the threshold on the magnitude of studentized residual that are considered as outliers
# this rules instead selects only the genes that are considered outliers in more than a given fraction of pairs LMO-LMX
rule gsea_analysis_plot:
    input: gene_res_freq = "gene_residual_frequency-2.tsv"
    output: GSEA_r = "GSEA_results.tsv", GSEA_ridgeplot = "gsea_ridgeplot.pdf"
    script: SRC_DIR+'/GSEA_analysis.R'

rule threshold_residual_freq:
    input: genes_freq = "gene_residual_frequency-2.tsv"
    output: gene_list= "gene_outlier_frequency-{thr}.tsv"
    shell: 
        """
         sed 1d {input.genes_freq} | bawk '$2 > {wildcards.thr} {{print $1}}' > {output.gene_list}
        """

rule go_analysis_plot:
    input: gene_list= "gene_outlier_frequency-{thr}.tsv", gene_univ = "genes_residuals_universe.tsv"
    output: GO_r = "GO_results-{thr}.tsv", out_dir = directory("go_barplot-{thr}")
    script: SRC_DIR+'/GO_analysis.R'

### CMS caller

rule genes_for_cms:
    input: expr=VSD
    output: VSD_f = "VSD_f.tsv"
    script: SRC_DIR+'/Prepare_Table_CMScaller.R'

rule get_symbols:
    input: VSD_f = "VSD_f.tsv"
    output: "VSD_genes.tsv"
    params: tool=SRC_DIR+"/add_description.R"
    shell:
        """
            {params.tool} -i {input.VSD_f} -o {output} -n 1  -f SYMBOL -t ENTREZID -d
        """

rule CMS:
    input: expr = VSD, VSD_genes = "VSD_genes.tsv"
    output: RES = "CMScaller.tsv", CMS_heatmap = "CMS_heatmap.pdf"
    script: SRC_DIR+ '/CMScaller.R'

rule CMStype:
    input: expr = VSD, metadata = MEDA, VSD_genes = "VSD_genes.tsv"
    output: RES = "{sclass}_CMScaller.tsv", CMS_heatmap = "{sclass}_CMS_heatmap.png", CMS_svg = "{sclass}_CMS.svg"
    script: SRC_DIR+ '/CMScallertype.R'

rule get_model_cms:
    input: simo="../cris/SIMO_v2.tsv", pdo="LMO_BASALE_CMScaller.tsv", pdx="LMX_BASALE_CMScaller.tsv"
    output: results="model_cms.tsv", results_wrong_pdo = "wrong_cms_pdo.tsv"
    log: "model_cms.log"
    script: SRC_DIR+ '/CMS_simo.R'

rule true:
    input: cms="model_cms.tsv", true="../../../../local/share/data/biobanca_pdo_buoni.tsv"
    output: "model_cms_validated.tsv"
    shell:
        """
            cat {input.cms} | bawk 'NR == 1' > {output}
            cat {input.true} | sed 1d | bawk '$2=="TRUE" {{print $1}}' > {output}.tmp
            cat {input.cms} | filter_1col 1 {output}.tmp >> {output}
        """
rule cohen:
    input: "model_cms_validated.tsv"
    output: "cohenK_cms_PDX-PDO"
    script: SRC_DIR+"/cohenK.R"

## TODO add selection on only TRUE cases in ../../../../local/share/data/biobanca_pdo_buoni.tsv //DONE ^

rule get_symbols_cms_cris:
    input: VSD_f = "/home/mferri/gene_expr_cms.tsv" # TODO-MF togliere riferimento a file nella home, o produrlo con regola o metterlo in local/share/data, btw  a chi serve l'output di questa regola?
    output: "gene_expr_cms_crisl.tsv"
    params: tool=SRC_DIR+"/add_description.R"
    shell:
        """
            {params.tool} -i {input.VSD_f} -o {output} -n 1  -f SYMBOL -t ENTREZID -d
        """

rule change_order_sankey_coppie_simo:
    input: cms = "model_cms_validated.tsv"
    output: reorder = "reorder_model_cms_validated.tsv"
    script: SRC_DIR+ "/reorder_cms_column.R"

###TODO: add flag for NA and file from conf?
rule sankey:
    input: "reorder_model_cms_validated.tsv"
    output: html="sankey_model_cms_validated_coppie_simo.html"
    script: SRC_DIR+"/sankey_classification.R"

#manualrule html_to_svg:
# 1- download sankey_model_cms_validated.html 
# 2- open in browser, reorder CMS as required
# 3- open developer tool and select the code in the <svg> </svg> tag
# 4- copy and paste in a text editor
# 5- add the xml header <?xml version="1.0" encoding="UTF-8" standalone="no"?> at the beginning
# 6- remove any <br> tag 
# 7- save and open with inkscape/illustrator to check
# 8- remove alpha channel, fix font class, font size, etc

### clustering (changing the file Cutoff0.05_LFC0.584/vsd_clustering.tsv.gz to Clustering_Cutoff0.05_LFC0.584_ok/vsd_clustering.tsv.gz after running again dds.rdata)
# rerun the 23/05/24 to be sure of the origin of Rdata
rule get_clustering:
    input: expr = "/scratch/trcanmed/DE_RNASeq/dataset/Class_comparison_biobanca/Clustering_Cutoff0.05_LFC0.584_ok/vsd_clustering.tsv.gz"
    output: boot = "clustering_true_boot.png", dendro = "dendrogram_clustering.png", clust_res = "count_clustering_model.tsv", pvals = "pvalue_counts.tsv", circleden = "circular_dendogram.png", pheat = "clustering_heatmap.pdf", outd="table_expression_clustering.Rdata"
    log: log="clustering_info.log"
    script: SRC_DIR+"/clustering_fin.R"

rule get_clustering_means:
    input: rdata="table_expression_clustering.Rdata"
    output: outf="pearson_clustering_means_wilcox.txt"
    script: SRC_DIR+"/meansofmeans_fin.R"
#output: boot = "clustering_true_boot.png", dendro = "dendrogram_clustering.png", clust_res = "count_clustering_model.tsv", pvals = "pvalue_counts.tsv", circleden = "circular_dendogram.png", pheat = "clustering_heatmap.png"
#for now only working with the first get_clustering

# rule get_clustering_sds:
#     input: expr = "/scratch/trcanmed/DE_RNASeq/dataset/Class_comparison_biobanca/Clustering_Cutoff0.05_LFC0.584_ok/vsd_clustering_sds.tsv.gz"
#     output: boot = "clustering_true_boot_sds.png", dendro = "dendrogram_clustering_sds.png", clust_res = "count_clustering_model_sds.tsv", pvals = "pvalue_counts_sds.tsv", circleden = "circular_dendogram_sds.png"
#     script: SRC_DIR+"/clustering_fin.R"

# rule get_clustering_sds_xo:
#     input: expr = "/scratch/trcanmed/DE_RNASeq/dataset/Class_comparison_biobanca/Clustering_Cutoff0.05_LFC0.584_ok/vsd_clustering_sds_xo.tsv.gz"
#     output: boot = "clustering_true_boot_sds_xo.png", dendro = "dendrogram_clustering_sds_xo.png", clust_res = "count_clustering_model_sds_xo.tsv", pvals = "pvalue_counts_sds_xo.tsv", circleden = "circular_dendogram_sds_xo.png"
#     script: SRC_DIR+"/clustering_fin.R"


### H <-> M converter:

rule get_conversion:
    input: gene_list = "Norkin_gene_list.tsv"
    output: df = "conversion_genes.tsv", txt = "different_genes.tsv"
    params: tool=SRC_DIR+"/gene_species_converter.R"
    shell:
        """
            {params.tool} -i {input.gene_list} -o {output.df} -x {output.txt} -t human.Rds -f mouse.Rds -T hgnc_symbol -F mgi_symbol -d
        """

### CMS_fpkm

rule genes_for_cms_fpkm:
    input: expr=FPKM
    output: FPKM_f = "FPKM_f.tsv"
    script: SRC_DIR+'/Prepare_Table_CMScaller_FPKM.R'

rule get_symbols_fpkm:
    input: fpkm_f = "FPKM_f.tsv"
    output: "fpkm_genes.tsv"
    params: tool=SRC_DIR+"/add_description.R"
    shell:
        """
            {params.tool} -i {input.fpkm_f} -o {output} -n 1  -f SYMBOL -t ENTREZID -d
        """

rule CMStype_fpkm:
    input: expr = FPKM, metadata = MEDA, FPKM_genes = "fpkm_genes.tsv"
    output: RES = "{sclass}_CMScaller_fpkm.tsv", CMS_heatmap = "{sclass}_CMS_heatmap_fpkm.png"
    script: SRC_DIR+ '/CMScallertypefpkm.R'

rule get_model_cms_fpkm:
    input: simo="../cris/SIMO_v2.tsv", pdo="LMO_BASALE_CMScaller_fpkm.tsv", pdx="LMX_BASALE_CMScaller_fpkm.tsv"
    output: results="model_cms_fpkm.tsv", results_wrong_pdo = "wrong_cms_pdo_fpkm.tsv"
    log: "model_cms.log"
    script: SRC_DIR+ '/CMS_simo.R'

rule true_fpkm:
    input: cms="model_cms_fpkm.tsv", true="../../../../local/share/data/biobanca_pdo_buoni.tsv"
    output: "model_cms_validated_fpkm.tsv"
    shell:
        """
            cat {input.cms} | bawk 'NR == 1' > {output}
            cat {input.true} | sed 1d | bawk '$2=="TRUE" {{print $1}}' > {output}.tmp
            cat {input.cms} | filter_1col 1 {output}.tmp >> {output}
        """
rule change_order_sankey:
    input: cms = "model_cms_validated_fpkm.tsv"
    output: reorder = "reorder_model_cms_validated_fpkm.tsv"
    script: SRC_DIR+ "/reorder_cms_column.R"

rule sankey_fpkm:
    input: "model_cms_validated_fpkm.tsv"
    output: pdf="sankey_model_cms_validated_fpkm.pdf", html="sankey_model_cms_validated_fpkm.html"
    script: SRC_DIR+"/sankey_classification.R"

### CMS_mediated

rule CMS_mediated:
    input: expr = "{sclass}_t_mean_gene_genealogyall.tsv.gz", VSD_genes = "VSD_genes.tsv"
    output: RES = "{sclass}_CMScaller_mediated.tsv", CMS_heatmap = "{sclass}_CMS_mediated_heatmap.pdf"
    script: SRC_DIR+ '/CMScaller.R'


### Collapsing single metric CMS for replicates
rule cms_classes_with_nc:
    input: tsv="{sclass}_CMScaller_fpkm.tsv"
    output: tsv="cms_fpkm_{sclass}_nc_{collapselevel}.tsv"
    run: 
        import pandas as pd
        import numpy as np
        #prediction      d.CMS1  d.CMS2  d.CMS3  d.CMS4  p.value FDR
        d = pd.read_table(input.tsv, sep="\t", index_col=0)
        d['genealogy'] = d.index
        d.loc[ [ type(x) is not str for x in d['prediction'].values ],'prediction'] = "NC"
        if wildcards.collapselevel == "arm":
            d['genealogy'] = [x[0:12] for x in d['genealogy'].values]
        elif wildcards.collapselevel == "smodel":
            d['genealogy'] = [x[0:7] for x in d['genealogy'].values]
        else:
            raise ValueError('Do not know how to collapse at ' + wildcards.collapselevel + ':[arm, smodel] are possible values')
        dp = pd.pivot_table(d, values='prediction', index=['genealogy'], aggfunc=np.unique)
        dp.loc[[type(x) is not str for x in dp['prediction'].values],'prediction'] = "HET"
        res = pd.DataFrame(dp)
        res.to_csv(output.tsv, sep="\t")

rule cms_classes_with_vsd:
    input: tsv="{sclass}_CMScaller.tsv"
    output: tsv="cms_vsd_{sclass}_nc_{collapselevel}.tsv"
    run: 
        import pandas as pd
        import numpy as np
        #prediction      d.CMS1  d.CMS2  d.CMS3  d.CMS4  p.value FDR
        d = pd.read_table(input.tsv, sep="\t", index_col=0)
        d['genealogy'] = d.index
        d.loc[ [ type(x) is not str for x in d['prediction'].values ],'prediction'] = "NC"
        if wildcards.collapselevel == "arm":
            d['genealogy'] = [x[0:12] for x in d['genealogy'].values]
        elif wildcards.collapselevel == "smodel":
            d['genealogy'] = [x[0:7] for x in d['genealogy'].values]
        else:
            raise ValueError('Do not know how to collapse at ' + wildcards.collapselevel + ':[arm, smodel] are possible values')
        dp = pd.pivot_table(d, values='prediction', index=['genealogy'], aggfunc=np.unique)
        dp.loc[[type(x) is not str for x in dp['prediction'].values],'prediction'] = "HET"
        res = pd.DataFrame(dp)
        res.to_csv(output.tsv, sep="\t")

## obtain sankey with smodel collasped couples

rule get_model_cms_smodel:
    input: pdx_f="cms_vsd_LMX_BASALE_nc_smodel.tsv", pdo_f = "cms_vsd_LMO_BASALE_nc_smodel.tsv"
    output: "vsd_smodel_cms-merged.tsv"
    script: SRC_DIR+ '/CRIS_smodel.R'

rule true_smodel:
    input: cms="vsd_smodel_cms-merged.tsv", true= "../../../../local/share/data/biobanca_pdo_buoni.tsv"
    output: "vsd_smodel_cms-merged_validated.tsv"
    shell:
        """
            cat {input.cms} | bawk 'NR==1' > {output}
            cat {input.cms} | filter_1col 1 <(cat {input.true} | sed 1d | bawk '$2=="TRUE" {{print $1}}') >> {output}
        """

rule sankey_smodel:
    input: "vsd_smodel_cms-merged_validated.tsv"
    output: html="vsd_sankey_smodel_cms_validated.html"
    script: SRC_DIR+"/sankey_classification.R"

## obtain sankey with x and h 

### prepare_sankeyxh_cms.R does both pdo_buoni_filter and not, comment the .R accordingly
### model_cms_lmh_validated is with pdo_buoni filter

rule model_cms_lmh:
    input: lmx = "LMX_BASALE_CMScaller_mediated.tsv", lmh = "LMH_CMScaller.tsv"#, true= "../../../../local/share/data/biobanca_pdo_buoni.tsv"
    output: merged = "model_cms_lmh.tsv"
    script: SRC_DIR+"/prepare_sankeyxh_cms.R"

## model_cms_lmh_validated sankey is the one with pdo_buoni filter, modify the rule accordingly

rule sankey_model_lmh:
    input: "model_cms_lmh.tsv"
    output: html="model_cms_lmh.html"
    script: SRC_DIR+"/sankey_classification.R"

#jaccard score for cms and cris

rule get_jaccards:
    input: cms = "reorder_model_cms_validated.tsv", cris = CRIS_RES
    output: cms_t = "jaccard_cms.tsv", cris_t = "jaccard_cris.tsv"
    script: SRC_DIR+"/jaccardscore_cmscris.R"

# Correlation pdo_pdx with pdo_buoni filter

rule pdo_buoni_filter:
    input: lmx='LMX_BASALE_mean_gene_genealogyall.tsv.gz',
           lmo='LMO_BASALE_mean_gene_genealogyall.tsv.gz',
           pdo=BUONI
    output: lmx_res='LMX_BASALE_mean_gene_genealogyall_buoni.tsv.gz',
           lmo_res='LMO_BASALE_mean_gene_genealogyall_buoni.tsv.gz'
    script: SRC_DIR+"/correlation_pdobuoni.R"

rule correlation_LMO_LMX_buoni:
    input: lmx='LMX_BASALE_mean_gene_genealogyall_buoni.tsv.gz',
           lmo='LMO_BASALE_mean_gene_genealogyall_buoni.tsv.gz'
    output: outfile = "correlations_rsquared_buoni.tsv", outfile2 = "LMX-LMO_correlation_smodelCoupled_buoni.tsv", out_dir=directory('plot_residuals_buoni')
    params: tool=BIN_DIR+"/Correlation_LMO_LMX-v2"
    shell:
        """
            rm -rf {output.out_dir}
            mkdir {output.out_dir}
            {params.tool} -x {input.lmx} -o {input.lmo} -r {output.outfile} -d {output.out_dir} -m {output.outfile2}
        """

rule pheatmap_all_buoni:
     input: correlation_matrix="LMX-LMO_correlation_smodelCoupled_buoni.tsv"
     output: pheatmap="pheatmap_correlation_smodel_buoni.pdf"
     script: SRC_DIR+'/pheatmap.R'


rule obtain_density_plot_wilcox_buoni:
    input: res="LMX-LMO_correlation_smodelCoupled_buoni.tsv"
    output: density_plot = "density_f_buoni.pdf", wilcox_result ="wilcox_buoni"
    script: SRC_DIR+'/matched_unmatched_plot_wilcox.R'

# rerun the 24/02/23 to obtain a definitive log for final checks (final!!)
# rerun the 29/01/24 to obtain CI and odds ratio 

# rerun on 02/04/24 for revision of clinical data by Eugy
# rerun on 15/05/24 to get CI in terms of odds ratio (added exp)
rule multivariata_clinical_data:
    input: clinical_data = CLI, pdo="../../../../local/share/data/whoiswho_validation_xen_revision_derivation.tsv", mut = FRA_MUT, umani = "../../../../local/share/data/lmh_detele_multivariate.tsv", msi="../../../../local/share/data/MSIstatus.xlsx"
    output: df_circos = "clinical_data_for_circos_revision.tsv", fit_plot = "plot_fit_validated_revision.pdf", results_fit = "result_fit_revision.tsv"
    log: log="clinical_data_for_circos.tsv.log"
    script: SRC_DIR+'/new_clinical_multivariata_clinicaldata.R'

### alla luce del dramma dei numeri non corrispondenti è stato creato un pdo buoni ad hoc con lo script in /local/share/definition_case_validation.R
### multivariata_KRAS_passage_site con il passaggio e il site viene prodotta da /local/src/kras_passage_multivariata.R

# rerun the 24/02/23 to obtain a definitive log for final checks (final!!)
rule univariata_mutation:
    input: pdo= "../../../../local/share/data/whoiswho_validation_xen_nolmh.tsv", rdata_targeted_all = "../../targeted_all/preprocGeneAF_0.05.Rdata"
    output: fit_plot_gene = "plot_fit_ctnnb1.pdf", res = "fit_genes_univariata.tsv", mut = "table_mut_genes.tsv", results_fit = "result_fit_ctnnb1.tsv"
    log: log="fit_genes_univariata.tsv.log"
    script: SRC_DIR+'/univariata_mutazioni_comments.R'

rule DNAseq_samples_EGAids_whoiswho:
    input: dataset = "/scratch/trcanmed/biobanca/local/share/data/DNAseq_samples_EGAids.xlsx", pdo= "../../../../local/share/data/whoiswho_validation_xen.tsv"
    output: res = "DNAseq_samples_EGAids_whoiswho.xlsx"
    script: SRC_DIR+'/DNAseq_samples_EGAids_whoiswho.R'

## deg_filtersteps_tractability_group.tsv made with /local/src/biobanca_imbuti_no1241_53.R

# Numeri paper:
#> d <- read.table(gzfile('LMX-LMO_correlation_simo_buoni.tsv.gz'), sep="\t", header=T)
#> summary(diag(as.matrix(d)))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
# 0.7042  0.8037  0.8271  0.8231  0.8482  0.8999 
#> length(diag(as.matrix(d)))
#[1] 67

#> res_df <- read.table(gzfile('LMX-LMO_correlation_simo_buoni.tsv.gz'), sep="\t", header=T)
#> unmatched <- c(res_df[upper.tri(res_df)], res_df[lower.tri(res_df)])
#> matched <- diag(as.matrix((res_df))) ### diag vuole la matrice perchè non converte da solo il data frame
#> summary(unmatched)
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
# 0.1700  0.5669  0.6194  0.6078  0.6648  0.8658 
#> res_df[rownames(res_df)=="CRC1241", colnames(res_df)=="CRC1241"]
#[1] 0.899925
#> summary(unlist(res_df[rownames(res_df)=="CRC1241",]) )
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
# 0.1700  0.2571  0.2991  0.3118  0.3353  0.8999 
#> summary(c(unlist(res_df[rownames(res_df)=="CRC1241",]),  res_df[, colnames(res_df)=="CRC1241"]))
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
# 0.1700  0.2761  0.3100  0.3222  0.3463  0.8999 
# summary(c(unlist(res_df[rownames(res_df)=="CRC1241", colnames(res_df)!="CRC1241"]),  res_df[rownames(res_df)!="CRC1241", colnames(res_df)=="CRC1241"]))
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
# 0.1700  0.2755  0.3097  0.3134  0.3449  0.5105 


### parallelo dell'espressione per le coppie simo con il merge giusto e non al lineage
rule correlation_LMX_LMO_simo_parallelo:
    input: simo=SIMOUNIQ_parallelo, expr=VSD, metadata=MEDA, right=RIGHT
    params: tool=BIN_DIR+"/Correlation_LMX-LMO_SimoCoupled_parallelo"
    output: outfile = "LMX-LMO_correlation_simo_parallelo.tsv.gz", kept_genes="kept_genes_correlation_simo_parallello.tsv"
    shell:
        """
            {params.tool} -s {input.simo} -v {input.expr} -m {input.metadata} -r {input.right} -o {output.outfile} -g {output.kept_genes}
        """

# rerun the 2/6 to investigate vs early-late
rule cor_pdo_buoni_filter_parallelo:
    input: simo_cor = "LMX-LMO_correlation_simo_parallelo.tsv.gz", pdo = BUONI
    output: res = "LMX-LMO_correlation_simo_buoni_parallelo.tsv.gz"
    script: SRC_DIR+"/correlation_pdo_filter.R"

rule pheatmap_parallelo:
    input: correlation_matrix="LMX-LMO_correlation_simo_parallelo.tsv.gz"
    output: pheatmap="pheatmap_correlation_parallelo.pdf"
    script: SRC_DIR+'/pheatmap.R'

rule pheatmap_buoni_parallelo:
    input: correlation_matrix="LMX-LMO_correlation_simo_buoni_parallelo.tsv.gz"
    output: pheatmap="pheatmap_correlation_buoni_parallelo.pdf"
    script: SRC_DIR+'/pheatmap.R'

rule obtain_density_plot_wilcox_simo_parallelo:
    input: res="LMX-LMO_correlation_simo_parallelo.tsv.gz"
    output: density_plot = "density_f_simo_parallelo.pdf", wilcox_result ="wilcox_simo_parallelo"
    script: SRC_DIR+'/matched_unmatched_plot_wilcox.R'

rule obtain_density_plot_wilcox_simo_buoni_parallelo:
    input: res="LMX-LMO_correlation_simo_buoni_parallelo.tsv.gz"
    output: density_plot = "density_f_simo_buoni_parallelo.pdf", wilcox_result ="wilcox_simo_buoni_parallelo"
    script: SRC_DIR+'/matched_unmatched_plot_wilcox.R'
    
rule get_model_cms_parallelo:
    input: simo=SIMOUNIQ_parallelo, pdo="LMO_BASALE_CMScaller.tsv", pdx="LMX_BASALE_CMScaller.tsv"
    output: results="model_cms_parallelo.tsv"
    script: SRC_DIR+ '/CMS_simo_parallelo.R'

rule true_parallelo:
    input: cms="model_cms_parallelo.tsv", true="../../../../local/share/data/biobanca_pdo_buoni.tsv"
    output: "model_cms_validated_parallelo.tsv"
    shell:
        """
            cat {input.cms} | bawk 'NR == 1' > {output}
            cat {input.true} | sed 1d | bawk '$2=="TRUE" {{print $1}}' > {output}.tmp
            cat {input.cms} | filter_1col 1 {output}.tmp >> {output}
        """
## questa volta non è reorder (rispetto all'originale) perchè è stato modificato lo script 
## produce direttamente prima i PDX e poi i PDO

rule sankey_parallelo:
    input: "model_cms_validated_parallelo.tsv"
    output: html="sankey_model_cms_validated_coppie_simo_parallelo.html"
    script: SRC_DIR+"/sankey_classification.R"

rule true_simo_cris_parallelo:
    input: cris="../cris/vsd_model_cris-right_parallelo.tsv", true="../../../../local/share/data/biobanca_pdo_buoni.tsv"
    output: "vsd_model_cris-right_validated_parallelo.tsv"
    shell:
        """
            cat {input.cris} | bawk 'NR==1' > {output}
            cat {input.cris} | filter_1col 1 <(cat {input.true} | sed 1d | bawk '$2=="TRUE" {{print $1}}') >> {output}
        """
rule cris_polishing_parallelo:
    input: cris="vsd_model_cris-right_validated_parallelo.tsv"
    output: results="vsd_model_cris-right_validated_clean_parallelo.tsv"
    script: SRC_DIR+"/cris_df_cleaning.R"

rule sankey_simo_cris_parallelo:
    input: "vsd_model_cris-right_validated_clean_parallelo.tsv"
    output: html="vsd_sankey_model_simo_cris_validated_clean_parallelo.html"
    script: SRC_DIR+"/sankey_classification.R"

rule get_jaccards_parallelo:
    input: cms = "model_cms_validated_parallelo.tsv", cris = "vsd_model_cris-right_validated_clean_parallelo.tsv"
    output: cms_t = "jaccard_cms_parallelo.tsv", cris_t = "jaccard_cris_parallelo.tsv"
    script: SRC_DIR+"/jaccardscore_cmscris.R"

## multivariata parallela senza i not established

rule multivariata_clinical_data_parallelo:
    input: clinical_data = CLI, pdo="../../../../local/share/data/whoiswho_validation_xen.tsv", mut = FRA_MUT, umani = "../../../../local/share/data/lmh_detele_multivariate.tsv"
    output: df_circos = "clinical_data_for_circos_parallelo.tsv", fit_plot = "plot_fit_validated_parallelo.pdf", results_fit = "result_fit_parallelo.tsv"
    log: log="clinical_data_for_circos_parallelo.tsv.log"
    script: SRC_DIR+'/new_multivariata_clinicaldata.R'

## revisioneeeee

rule mutational_diff_boosted:
    input: rdata="../../targeted/oncoprint_0.05.RData"
    output: chisq="chisq_differenze_mutazionali.tsv", pdf="number_mutation_diff_o_x.pdf"
    script: SRC_DIR+"/analysis_oncoprint_biobanca_only_pdo_pdx.R"


# rerun on 15/05/24 to get CI in terms of odds ratio (added exp)
# added _revision to clinical_data_for_circos
# niente e cambia tutto, quindi tengo i dati vecchi e devo fare check e chiedere a Marti
rule kras_multivariata_passaggio:
    input: pas="/scratch/trcanmed/biobanca/local/share/data/passaggi_query_las_Simo_march2022.txt", mut = FRA_MUT, pdo="../../../../local/share/data/whoiswho_validation_xen_nolmh.tsv", side="/scratch/trcanmed/biobanca/dataset/V1/trans_sign/expr/clinical_data_for_circos_revision.tsv"
    output: res="fit_kras_passage.tsv", fit_plot="multivariata_KRAS_passage_site.pdf"
    log: log="fit_kras_passage.log"
    script: SRC_DIR+"/kras_passage_multivariata_nonotperformed.R"

rule sistemazione_clinical_data: ##per multivariata clinical data
    input: data="/scratch/trcanmed/biobanca/local/share/data/Extended_Data_Table_1_NEW_DEF.xlsx", m="/mnt/trcanmed/snaketree/prj/pdxopedia/local/share/data/eugy_msi_long.tsv"
    output: res="../../../../local/share/data/clinical_data_done_revision020424.tsv"
    script: SRC_DIR+"/preprocess_clinical_data.R"

rule circos_revision:
    input: cli="clinical_data_for_circos_revision.tsv", colori="../../../../local/share/data/clinical_data_circos_cols_emendati_complete_difforder3_wderivation_revision.tsv"
    output: circos="circles_prediletti_complete_wderivation_revision.pdf", legenda="legenda_circles_prediletti_complete_wderivation_revision.pdf"
    script: SRC_DIR+"/cerchietti_completi_wderivation_revision.R"