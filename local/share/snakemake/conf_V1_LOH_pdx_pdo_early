import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,'.PRJ_ROOT')):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception('Can not find the PRJ_ROOT directory')

PRJ_ROOT=find_prj_root()
BIOINFO_ROOT = os.getenv('BIOINFO_ROOT')
SNAKE_ROOT=os.getenv('SNAKE_ROOT')

BIN_DIR=PRJ_ROOT+'/local/bin'
SRC_DIR=PRJ_ROOT+'/local/src'
DATA=PRJ_ROOT+'/local/share/data/cetuxi'
SEQUENZA_PDO='/mnt/trcanmed/snaketree/prj/snakegatk/dataset/biobanca_earlylate_pdo'
SEQUENZA_PDX='/mnt/trcanmed/snaketree/prj/snakegatk/dataset/biobanca_earlylate_xeno'
SEQUENZA_TO_BED_X='/mnt/trcanmed/snaketree/prj/snakegatk/dataset/biobanca_earlylate_xeno/loh/bed_cnv_good'
SEQUENZA_TO_BED_O='/mnt/trcanmed/snaketree/prj/snakegatk/dataset/biobanca_earlylate_pdo/loh/bed_cnv_good'


SAMPLES_dic={"CRC0095":["CRC0095LMX0B03211TUMD02000","CRC0095LMO0A01003001VT0600_7D"],
"CRC0099":["CRC0099LMX0A04215TUMD02000_3","CRC0099LMO0A01003001VT0600D"],
"CRC0152":["CRC0152LMX0B03003TUMD02000","CRC0152LMO0C01003001VT0800D"],
"CRC0464":["CRC0464LMX0A03005TUMD02000","CRC0464LMO0A01003001VT0700D"],
"CRC1446":["CRC1446LMX0A01001TUMD02000","CRC1446LMO0A01003001VT0800D"],
"CRC1449":["CRC1449LMX0B01001TUMD02000","CRC1449LMO0A01003001VT0800D"],
"CRC1588":["CRC1588LMX0B02001TUMD02000","CRC1588LMO0A01003001VT0700D"],
"CRC1598":["CRC1598LMX0B02001TUMD02000","CRC1598LMO0A01003001VT0600D"],
"CRC0123":["CRC0123LMX0A04040TUMD02000","CRC0123LMO0A01003001VT0600D"],
"CRC0148":["CRC0148LMX0A04002TUMD02000","CRC0148LMO0A01003001VT0800D"],
"CRC0169":["CRC0169LMX0B04003TUMD02000","CRC0169LMO0A01003001VT0600_7D"],
"CRC0171":["CRC0171LMX0B04008TUMRL0200","CRC0171LMO0A01003001VT0600_7D"],
"CRC0188":["CRC0188LMX0A04007TUMRL0200","CRC0188LMO0A01003001VT0700D"],
"CRC0542":["CRC0542LMX0B06001TUMD02000","CRC0542LMO0C01003001D03000"],
"CRC1169":["CRC1169LMX0B05004TUMD02000","CRC1169LMO0C01003001VT0800D"],
"CRC1430":["CRC1430LMX0A02002TUMD02000","CRC1430LMO0B01003001VT0800D"],
"CRC1460":["CRC1460LMX0A02001TUMD02000","CRC1460LMO0A01003001VT0800D"],
"CRC1502":["CRC1502LMX0A01001TUMD02000","CRC1502LMO0A01003001VT0700D"],
"CRC1568":["CRC1568LMX0B02001TUMD02000","CRC1568LMO0A01003001VT0700D"],
"CRC1599":["CRC1599LMX0A02001TUMD02000","CRC1599LMO0A01003001VT0600D"],
"CRC1628":["CRC1628LMX0A02003TUMD02000","CRC1628LMO0A01003001D03000"],
"CRC1961":["CRC1961LMX0A02001TUMD02000","CRC1961LMO0A01003001VT0600D"],
"CRC0196":["CRC0196LMX0B10011TUMD02000","CRC0196LMO0B01003001VT0800D"]
}

SAMPLES_EXT_X=[x[0] for x in SAMPLES_dic.values()]
SAMPLES_EXT_O=[x[1] for x in SAMPLES_dic.values()]
SAMPLES_EXT=[x[0] for x in SAMPLES_dic.values()]+[x[1] for x in SAMPLES_dic.values()]


SAMPLES=["CRC0095","CRC0099","CRC0152","CRC0464","CRC1446","CRC1449","CRC1588","CRC1598", "CRC0123", "CRC0148", "CRC0169", "CRC0171", "CRC0188", "CRC0542", "CRC1169", "CRC1430", "CRC1460", "CRC1502", "CRC1568", "CRC1599", "CRC1628", "CRC1961", "CRC0196"]



SEG_DIM=[100000]

xs=[x[0][9:10] for x in SAMPLES_dic.values()]
earlys=[int(x[1][14:17]) for x in SAMPLES_dic.values()]

rule check:
    run:
        print(earlys)
        print([x <= 3 for x in earlys])
        print(xs)
        print([x == 'X' for x in xs])
        print(set([x <= 3 for x in earlys]))
        print(set([x == 'X' for x in xs]))

