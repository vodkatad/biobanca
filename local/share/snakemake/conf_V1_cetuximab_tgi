import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,'.PRJ_ROOT')):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception('Can not find the PRJ_ROOT directory')

PRJ_ROOT=find_prj_root()
BIOINFO_ROOT = os.getenv('BIOINFO_ROOT')
SNAKE_ROOT=os.getenv('SNAKE_ROOT')

BIN_DIR=PRJ_ROOT+'/local/bin'
SRC_DIR=PRJ_ROOT+'/local/src'
DATA=PRJ_ROOT+'/local/share/data/cetuxi'
BUONI = "../../../local/share/data/biobanca_pdo_buoni.tsv"

MODELS_Y='cetuxi_perc_w3_buoni.tsv'
MODELS_X='pdo_cetuxi_buoni.tsv'
WANTED_X=['CTG_5000','CTG_1250','CTG_20000']
MERGE='case'
YNAME='Cetuximab_dVw3'
NAME='CTG'
X_AUC='CTG_5000'

if SNAKE_ROOT == '/mnt/trcanmed/snaketree':
    FRA_MUT=SNAKE_ROOT+'/prj/pdxopedia/local/share/data/dtb_mutations_vlookupAndrea_expandedPRLM.tsv'
    FRA_CN=SNAKE_ROOT+'/prj/pdxopedia/dataset/misc_annots/binarized_cn.tsv'
else:
    FRA_MUT=SNAKE_ROOT+'/pdxopedia/local/share/data/dtb_mutations_vlookupAndrea_expandedPRLM.tsv'
    FRA_CN=SNAKE_ROOT+'/pdxopedia/dataset/misc_annots/binarized_cn.tsv'

rule preprocess_tgi:
    input: xlsx=DATA+'/aggregati_TGI_fixed0.xlsx', cet="../cetuximab/cetuxi_perc_w3_buoni.tsv"
    output: tgi_nodup="TGI_{sclass}_filled_GenID_removeddup.tsv", scattereci="scatter_tgi_{sclass}_reci.pdf", delta="delta_{sclass}_arms.pdf", tgi_ave="tgi_{sclass}_chosen.tsv"
    log: log="preprocess_tgi_{sclass}.log"
    script: SRC_DIR+'/preprocess_tgi_v2.R'


CETUXI="tgi_TGI_Median_chosen.tsv" # no header, two cols, smodel then response
# remember to keep the right CRC0177! LMX0A was kept.

ATP=DATA+'/PDO_CTG.txt'
IMAGING=DATA+'/PDO_imaging.txt'

rule filter_pdo_cetuxi:
    input: pdo_cet = "pdo_cetuxi.tsv", buoni = BUONI
    output: res = "pdo_cetuxi_buoni.tsv"
    script: SRC_DIR+"/filter_pdocetuxi.R"

rule filter_w3_cetuxi:
    input: pdo_cet = "cetuxi_perc_w3.tsv", buoni = BUONI
    output: res = "cetuxi_perc_w3_buoni.tsv"
    script: SRC_DIR+"/filter_pdocetuxi.R"


rule scatterplot_annot:
    input: x=MODELS_X, y=MODELS_Y, mut=FRA_MUT, cn=FRA_CN,
           Rimage=PRJ_ROOT+'/dataset/V1/theme_9.Rdata'
    output: plot='scatter.pdf', threewt="threewt.tsv"
    log: "scatter.tsv" # will store rare cases when making CN or muts info unique they were not consistent (we randomly kept one)
    params: tool=BIN_DIR+'/scatter_annotated', prefix=NAME, merge=MERGE, yname=YNAME
    shell:
        """
            {params.tool} {input.x} {input.y} {output.plot} {params.prefix} {params.merge} {params.yname} {input.mut} {input.cn} {input.Rimage} {log} {output.threewt}
        """

rule order_tgi:
    input: tgi="cetuxi_perc_w3_buoni.tsv", order=DATA+'/order_suppl_6.tsv'
    output: "addition_suppl_6.tsv"
    shell: 
        """
            Rscript -e 'd <- read.table("{input.tgi}", sep="\\t", header=T); 
            o <- read.table("{input.order}", sep="\\t", header=T);
            m <- merge(o, d, by.x="smodel", by.y="case", all.x=T);
            m <- m[match(o$smodel, m$smodel),];
            write.table(m, file="{output}", sep="\\t", row.names=F, quote=F);'
        """


# sclass -> 'volvar_NT'

rule preprocess_volvarNT:
    input: xlsx=DATA+'/aggregati_TGI_fixed0.xlsx', cet="../cetuximab/cetuxi_perc_w3_buoni.tsv"
    output: volvar_ave="volvarNT_chosen.tsv"
    log: log="volvarNT.log"
    script: SRC_DIR+'/preprocess_volvar_v2.R'

# Adding header
rule header:
    input: 'volvarNT_chosen.tsv'
    output: 'hvolvarNT_chosen.tsv'
    shell:
        """
            echo -e "case\\tperc" > {output}
            cat {input} >> {output}
        """

rule filter_volvar_nt:
    input: pdo_cet = "hvolvarNT_chosen.tsv", buoni = BUONI
    output: res = "volvarNT_buoni.tsv"
    script: SRC_DIR+"/filter_pdocetuxi.R"

rule order_volvar:
    input: volvar="volvarNT_buoni.tsv", order=DATA+'/order_suppl_6.tsv'
    output: "addition_suppl_6_bis.tsv"
    shell: 
        """
            Rscript -e 'd <- read.table("{input.volvar}", sep="\\t", header=T); 
            o <- read.table("{input.order}", sep="\\t", header=T);
            m <- merge(o, d, by.x="smodel", by.y="case", all.x=T);
            m <- m[match(o$smodel, m$smodel),];
            write.table(m, file="{output}", sep="\\t", row.names=F, quote=F);'
        """

