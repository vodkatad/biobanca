import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")

PRJ_ROOT=find_prj_root()
BIOINFO_ROOT = os.getenv('BIOINFO_ROOT')
SNAKE_ROOT=os.getenv('SNAKE_ROOT')

if SNAKE_ROOT != "/scratch/trcanmed":
    NEED_PRJ = "/prj"
else:
    NEED_PRJ = ""

BIN_DIR=PRJ_ROOT+"/local/bin"
SRC_DIR=PRJ_ROOT+"/local/src"
DATA=PRJ_ROOT+"/local/share/data"

SIMO=DATA+"/list_matched_PDO-PDX_DNA.txt"
# We change it to ../cris/SIMO_v2.tsv which has more pairs (TODO why?)
#SIMOUNIQ="../cris/unique_PDX-PDO_switch.tsv"
SIMOUNIQ="../cris/chosen_lineage.tsv"
RIGHT=SNAKE_ROOT+"/prj/DE_RNASeq/local/share/data/xo_basali"
CRIS_RES = "../cris/vsd_model_cris-right_validated.tsv"
BUONI = "../../../../local/share/data/biobanca_pdo_buoni.tsv"
FRA_MUT = "../../enrichment/fra_mutational_annotation.tsv"
CLI = "../../../../local/share/data/clinical_data_done.tsv"

### ADD 322 sbi third experiment
DRUG="/mnt/trcanmed/snaketree/prj/biobanca/local/share/data/Drug_Screening_Tables.xlsx"

# List all the classes names of samples for which we want to study replicates and compute correlations
#CLASSES=["LMO_BASALE","LMX_BASALE","LMH"] # LMH class does not have replicates
CLASSES=["LMO_BASALE","LMX_BASALE"] 

# Expression data: metadata and vsd
MEDA=SNAKE_ROOT+NEED_PRJ+'/RNASeq_biod_metadata/dataset/july2020_starOK/selected_metadata_annot_final_nolinfo_nooutlier'
VSD=SNAKE_ROOT+NEED_PRJ+"/DE_RNASeq/dataset/Biodiversa_up5_starOK_selected/vsd.tsv.gz"
FPKM=SNAKE_ROOT+NEED_PRJ+"/DE_RNASeq/dataset/Biodiversa_up5_starOK_selected/fpkm_H.tsv.gz"
VSD_TEST="/home/mferri/small_vsd.tsv.gz"


# CRC0177 has three RNAseq samples for LMO_BASALE, the only exception to the 'two' rule.
#egrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ sed 1d LMX_BASALE_replicates.tsv | bawk '$3!=2' 
#egrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ sed 1d LMO_BASALE_replicates.tsv | bawk '$3!=2' 
#23      CRC0177 3       CRC0177LMO0A04008002R01000,CRC0177LMO0D04017001R01000,CRC0177LMO0D04021002R01000
# The rule has the sclass wildcard in order to have homogeneous read names for the rules that follow.
#CRC0177LMO0D04017001D01000 EGFR mut
#CRC0177LMO0A04008002D01000 EGFR wt

#egrassi@godot:/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/trans_sign/expr$ grep CRC0177 /mnt/trcanmed/snaketree/prj/RNASeq_biod_metadata/dataset/july2020_starOK/selected_metadata_annot_final_nolinfo_nooutlier
#CRC0177LMO0A04008002R01000      pass    pass    NA      NA      4       LMO_BASALE      1.665   NA
#CRC0177LMO0D04017001R01000      pass    pass    NA      NA      4       LMO_BASALE.2    1.665   NA
#CRC0177LMO0D04021002R01000      pass    pass    NA      NA      4       LMO_BASALE.1    1.665   NA
#CRC0177LMX0A02201TUMR05000      pass    pass    NA      pass    4       LMX_BASALE      1.665   NA

# For xenos in RNAseq we have the 'A' branch,  the ones from which the PDO derived are:
#EGFR mut	CRC0177LMX0B07002TUMD01000
#EGFR wt	CRC0177LMX0B05001TUMD01000

# I assume that the mut arose after generation n.5 for branch B, A then should be WT - therefore we keep the wt organoid which has no replicates with RNAseq!
# So we can simply get rid of any 'triplicate'
rule remove_triplicates_CRC0177:
    input: replicates="{sclass}_replicates.tsv"
    output: "{sclass}_replicates_pruned.tsv"
    shell:
        """
            bawk '$3==2 || NR==1' {input} > {output}
            echo "WARNING! This is a data-specific rule, you should check comments to see if criteria still applies for RNAseq releases != from july2020_starOK"
        """

rule add_no_replicates_LMO:
    input: metadata=MEDA, expr=VSD, mean_expr='LMO_BASALE_mean_gene_genealogy.tsv', repli='LMO_BASALE_replicates_samples.tsv'
    output: 'LMO_BASALE_mean_gene_genealogyall.tsv.gz'
    params: sclass="LMO_BASALE"
    shell:
        """
            echo -e 'CRC0177LMO0D04017001R01000\\nCRC0177LMO0D04021002R01000' > {output}.tmp3
            sed 1d {input.metadata} | grep -w {params.sclass} | cut -f 1 | filter_1col -v 1 {input.repli} |
            filter_1col -v 1 {output}.tmp3 > {output}.tmp
            cat {input.mean_expr} > {output}.tmp2
            zcat {input.expr} | bawk 'NR==1{{print 'Gene',$0}} NR!=1{{print $0}}' | transpose | sed 1d | \
            filter_1col 1 {output}.tmp | bawk '{{M=substr($1,0,7);$1="";print M,$0}}' | cut -f 2 --complement >> {output}.tmp2
            gzip -c {output}.tmp2 > {output}
            rm {output}.tmp*
        """

## remove lmh from pdo_buoni "CRC1337", "CRC1342", "CRC1563", "CRC1566"

rule remove_lmh_from_pdobuoni:
    input: inp = "/scratch/trcanmed/biobanca/local/share/data/biobanca_pdo_buoni_lmh.tsv"
    output: out = "../../../../local/share/data/biobanca_pdo_buoni.tsv"
    script: SRC_DIR+"/pdo_buoni_nolmh.R"

